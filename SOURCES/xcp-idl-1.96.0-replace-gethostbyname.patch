diff --git c/lib/open_uri.ml w/lib/open_uri.ml
index b63df63..ca96ae1 100644
--- c/lib/open_uri.ml
+++ w/lib/open_uri.ml
@@ -17,12 +17,22 @@
 
 open Xapi_stdext_pervasives.Pervasiveext
 
+module D = Debug.Make (struct let name = "open_uri" end)
+open D
+
 let handle_socket f s = try f s with e -> Backtrace.is_important e ; raise e
 
 let open_tcp f host port =
-  let host_entry = Unix.gethostbyname host in
-  let sockaddr = Unix.ADDR_INET (host_entry.Unix.h_addr_list.(0), port) in
-  let s = Unix.socket Unix.PF_INET Unix.SOCK_STREAM 0 in
+  let host = Scanf.ksscanf host (fun _ _ -> host) "[%s@]" Fun.id in
+  let sockaddr =
+    match Unix.getaddrinfo host (string_of_int port) [] with
+    | [] ->
+      error "No addrinfo found for host: %s on port: %d" host port ;
+      raise Not_found
+    | addrinfo::_ -> addrinfo.Unix.ai_addr
+  in
+  let family = Unix.domain_of_sockaddr sockaddr in
+  let s = Unix.socket family Unix.SOCK_STREAM 0 in
   finally
     (fun () -> Unix.connect s sockaddr ; handle_socket f s)
     (fun () -> Unix.close s)
diff --git c/lib/posix_channel.ml w/lib/posix_channel.ml
index da9dda0..af919a9 100644
--- c/lib/posix_channel.ml
+++ w/lib/posix_channel.ml
@@ -207,9 +207,12 @@ let receive protocols =
   | V4V_proxy (_, _) ->
       assert false (* weight is 0 above *)
   | TCP_proxy (ip, port) -> (
-      let s = Unix.socket Unix.PF_INET Unix.SOCK_STREAM 0 in
+      let unwrapped_ip = Scanf.ksscanf ip (fun _ _ -> ip) "[%s@]" Fun.id in
+      let addr = Unix.ADDR_INET (Unix.inet_addr_of_string unwrapped_ip, port) in
+      let family = Unix.domain_of_sockaddr addr in
+      let s = Unix.socket family Unix.SOCK_STREAM 0 in
       try
-        Unix.connect s (Unix.ADDR_INET (Unix.inet_addr_of_string ip, port)) ;
+        Unix.connect s addr ;
         s
       with e -> Unix.close s ; raise e
     )
diff --git c/misc/channel_helper.ml w/misc/channel_helper.ml
index bf600d5..be1aea5 100644
--- c/misc/channel_helper.ml
+++ w/misc/channel_helper.ml
@@ -86,9 +86,14 @@ let help =
 
 (* Commands *)
 let advertise_t _common_options_t proxy_socket =
-  let s_ip = Lwt_unix.socket Lwt_unix.PF_INET Lwt_unix.SOCK_STREAM 0 in
+  let unwrapped_ip = Scanf.ksscanf !ip (fun _ _ -> !ip) "[%s@]" Fun.id in
+  let addr =
+    Lwt_unix.ADDR_INET (Lwt_unix.inet_addr_of_string unwrapped_ip, port)
+  in
+  let family = Lwt_unix.domain_of_sockaddr addr in
+  let s_ip = Lwt_unix.socket family Lwt_unix.SOCK_STREAM 0 in
   (* INET socket, can't block *)
-  Lwt_unix.bind s_ip (Lwt_unix.ADDR_INET (Unix.inet_addr_of_string !ip, 0))
+  Lwt_unix.bind s_ip addr
   >>= fun () ->
   Lwt_unix.listen s_ip 5 ;
   let port =
